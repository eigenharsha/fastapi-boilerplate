[project]
name = "angula"
version = "0.1.0"
description = "ai assistant"
authors = [{ name = "Kumar Harsha", email = "kumar.harsha@angula.ai" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.12"

# This is the default toolchain that is used
toolchain = "cpython@3.12"

# This is the default build system that is used
build-system = "hatchling"
dependencies = [
    "fastapi>=0.115.6",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "anthropic>=0.8.0",
    "redis>=5.2.1",
    "arq>=0.26.1",
    "fastcrud>=0.15.4",
    "sqlmodel>=0.0.22",
    "bcrypt>=4.2.1",
    "pydantic-settings>=2.7.1",
    "httpx>=0.28.1",
    "python-multipart>=0.0.20",
    "greenlet>=3.1.1",
    "python-jose>=3.3.0",
    "uvicorn>=0.34.0",
    "loguru>=0.7.3",
    "httptools>=0.6.1",
    "uuid>=1.30",
    "openai>=1.59.4",
    "livekit>=0.18.3",
    "grpcio>=1.69.0",
    "aiofiles>=24.1.0",
    "pydantic>=2.10.4",
]

# The dependency operator to use by default for dependencies.  The options are
# '>=', '~=', and '=='.  The default currently is '>='.  This affects the behavior
# of `rye add`.
dependency-operator = ">="

# Enables global shims when set to `true`.  This means that the installed
# `python` shim will resolve to a Rye-managed toolchain even outside of
# virtual environments.
global-python = false

# Enable or disable automatic `sync` after `add` and `remove`.  This defaults
# to `true` when uv is enabled and `false` otherwise.
autosync = true

# Marks the managed .venv in a way that cloud-based synchronization systems
# like Dropbox and iCloud Files will not upload it.  This defaults to `true`
# as a .venv in cloud storage typically does not make sense.  Set this to
# `false` to disable this behavior.
venv-mark-sync-ignore = true


# When set to `true` Rye will fetch certain interpreters with build information.
# This will increase the space requirements, will put the interpreter into an
# extra folder called `./install/` and place build artifacts adjacent in `./build`.
fetch-with-build-info = false

# Define your main dependencies here

[proxy]
# the proxy to use for HTTP (overridden by the http_proxy environment variable)
http = "http://127.0.0.1:4000"
# the proxy to use for HTTPS (overridden by the https_proxy environment variable)
https = "http://127.0.0.1:4000"

[behavior]
# When set to `true` the `managed` flag is always assumed to be `true`.
force-rye-managed = false

# An array of tables with optional sources.  Same format as in pyproject.toml
[[sources]]
name = "default"
url = "https://pypi.org/simple/"

# This key specifies the scripts that are to be generated and installed into the virtual environment during sync.
# These scripts will invoke the configured entry point.
[project.scripts]
devrun = 'main:app'

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.rye]
universal = true

# This key tells rye that this project is supposed to be managed by Rye. This key primarily affects some automatic
# creation of virtualenvs. For instance Rye will not try to initialize a virtualenv when using shims without this flag.
# It can be forced enabled in the global config.
managed = true

# If this key is set to true the project is declared as a virtual project.
# This is a special mode in which the package itself is not installed, but only the dependencies are.
# This is for instance useful if you are not creating a Python project, but you are depending on Python software.
# As an example you can use this to install software written in Python.
# This key is set to true when rye init is invoked with the --virtual flag.
virtual = true

dev-dependencies = [
    "Werkzeug[watchdog]==3.1.3",
    "ipdb==0.13.13",
    "psycopg[c]==3.2.3",
    "watchfiles==1.0.3",
    "mypy==1.13.0",
    "pytest==8.3.4",
    "pytest-sugar==1.0.0",
    "ruff==0.8.4",
    "coverage==7.6.9",
    "pre-commit==4.0.1",
    "factory-boy==3.3.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye.scripts]
serve = { cmd = "uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload" }
start = "uvicorn src.main:app --reload"
lint = { chain = ["lint:black", "lint:flake8"] }
"lint:black" = "black --check src"
"lint:flake8" = "flake8 src"

[tool.rye.format]
line-length = 120
fix = true

[tool.rye.lint]
target-version = "py311"
select = [
    "F", # Pyflakes
    "E", # pycodestyle
    "W", # Warning
    "C", # Complexity (mccabe+) & comprehensions
    "UP", # pyupgrade
    "I", # isort
]
ignore = [
    "E402", # module level import not at top of file
    "UP006", # use-pep585-annotation
    "UP007", # use-pep604-annotation
    "E741", # Ambiguous variable name
]

[tool.rye.lint.per-file-ignores]
"__init__.py" = [
    "F401", # unused import
    "F403", # star imports
]

[tool.rye.lint.mccabe]
max-complexity = 24

[tool.rye.lint.pydocstyle]
convention = "numpy"
